package JAVA_6TH;

public class test {
	String a = "ilhuhilhl";
	int b;
	char c;
	private double d;//注意private方法只能在本类里面调用，外部无法调用。所以想使用private的值需要在类中写get、set函数(注意是public的方法)，之后才能在外部使用
//	封装的优点：提高了安全性，防止非法值改变成员变量。
//	成员变量不赋值即可引用（默认空值或者0），但是局部变量不行，必须赋值
	public String changea(String x) {
		return x;
	}
//	你直接这样returnx也可以不过就是不能改变a的值罢了2333
//	虽然在那边看效果是一样的啦
	test(double x){
		d = x;
	}
	test(String x,int y){
		a = x;
		b = y;
	}
	test(){}
	test(char c)
	{
		this.c = c;
//	这里的话如果构造方法的传入参数和成员变量的名字相同，则需要this方法来赋值，否则会将值传给参数本身。
	}
/*	构造方法：在预加载的时候给了规定的成员表变量一个值，使得在new一个新的对象的时候可以对类中的成员变量进行初始化，向类中传递一个参数。
 *  这样就提高了类成员的现实意义。
 *  构造方法没有返回值也不能有返回值，要和普通的方法区分开所以不能添加关键字，权限等信息，方法名和类名相同。
 *  如果没有声明构造方法的话编译器在编译时相当于给加了一个空参的构造方法
 *  构造方法是以重载的形式出现的，所以可以定义多个构造方法，然后编译器会根据你传入的值的数量自动调用相应的方法
 * */
	public void output()
	{
		System.out.println(a);
		System.out.println(d);
	}
	public void output1()
	{
		System.out.println(a +"\n" + b);
	}

}
//每个类中都必须有一个构造方法，构造方法必须和类同名（默认情况下）
/*说了这么多类只是一个大的函数，因为函数不允许嵌套，但是有了类的话就可以在“类”这个大函数里嵌套许多小的函数(方法),所以调用起来使用就变得简单起来
 * 逻辑也会更加清晰.
 * 这样就能够理解为什么调用另一个类的时候不能直接调用类中的变量.....因为哪有直接在函数外调用函数变量的
 * 不过方法相当于给了函数一个内部的入口可以方便直接改变内部变量的值.当然没有方法也可以就是类内部的变量你没法访问就是啦(摊手)
 * 那么的话开始new的时候初始化相当于调用了"类"这个大函数,可见是必须的而且十分重要的.
 * 如果在同一个类中想直接调用的的话不还是把方法直接看成个函数拿过来用就行了......
 * 说白了还是只是方便整理书写的问题,当然在以后的封装重载重写或者其他的方面优势也是很大的23333
 * 当然即使在同一个类中如果你想调用方法的话只能调用静态方法，动态的还是要靠初始化类中的方法来实现。
 * 虽然静态方法在外部也能调用，但是不是很推荐这样做。
 */